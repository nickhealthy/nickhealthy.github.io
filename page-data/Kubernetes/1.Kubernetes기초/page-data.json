{"componentChunkName":"component---src-templates-blog-post-js","path":"/Kubernetes/1.Kubernetes기초/","result":{"data":{"site":{"siteMetadata":{"title":"Woo's Dev Log","author":"nickhealthy","siteUrl":"https://nickhealthy.github.io","comment":{"disqusShortName":"","utterances":"nickhealthy/nickhealthy.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"e561bd4e-9e6e-55b0-b00e-f6b4db0b9cd5","excerpt":"…","html":"<h2 id=\"쿠버네티스\" style=\"position:relative;\"><a href=\"#%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4\" aria-label=\"쿠버네티스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쿠버네티스</h2>\n<p>큰 기업들은 대규모의 서비스를 운영하고 있기 때문에 최대한 자원을 효율적으로 써야 비용에 유리하다.<br>\n또한 트래픽을 예측할 수도 없을뿐더러, 대량의 트래픽에 대비해 모든 인프라와 자원들을 갖춰 놓긴 힘들 것이다.</p>\n<p>그래서 서버 자원을 효율적으로 쓰기 위해서는 <strong>가상화기술</strong>에 대해 관심을 가질 수 밖에 없다.</p>\n<h3 id=\"쿠버네티스의-장점\" style=\"position:relative;\"><a href=\"#%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"쿠버네티스의 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쿠버네티스의 장점</h3>\n<ul>\n<li>\n<p>쿠버네티스는 여러 기능들을 통해 운영 자동화 지원한다.</p>\n<ul>\n<li>운영환경이 편리해진다.</li>\n</ul>\n</li>\n<li>\n<p>서비스 효율이 증가해 서버가 적어지게 되면 그만큼 서버의 유지비용이 적어진다.</p>\n<ul>\n<li>즉, 운영의 규모가 커질수록 쿠버네티스의 효율이 증가하게 된다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"가상화-기술에-대한-history\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%83%81%ED%99%94-%EA%B8%B0%EC%88%A0%EC%97%90-%EB%8C%80%ED%95%9C-history\" aria-label=\"가상화 기술에 대한 history permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가상화 기술에 대한 History</h2>\n<h3 id=\"linux-자원-격리-기술\" style=\"position:relative;\"><a href=\"#linux-%EC%9E%90%EC%9B%90-%EA%B2%A9%EB%A6%AC-%EA%B8%B0%EC%88%A0\" aria-label=\"linux 자원 격리 기술 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Linux 자원 격리 기술</h3>\n<p>리눅스에서는 자원들을 격리해서 프로세스들이 독립적인 환경에서 돌아가는 즉, 자원 격리 기술인 <code class=\"language-text\">namespace</code>, <code class=\"language-text\">cgroup</code> 등이 있었다.<br>\n하지만 사용하기가 불편해 대중적이지 못했다.</p>\n<h3 id=\"vm-가상화-기술\" style=\"position:relative;\"><a href=\"#vm-%EA%B0%80%EC%83%81%ED%99%94-%EA%B8%B0%EC%88%A0\" aria-label=\"vm 가상화 기술 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>VM 가상화 기술</h3>\n<p>기업들과 일반인 모두에게 쉽게 가상화를 구현하는데 발전이 되었다.<br>\n또한 <code class=\"language-text\">NASA</code>와 <code class=\"language-text\">rack space</code>가 공동으로 제작한 <code class=\"language-text\">openstack</code>으로 자신의 운영체제를 자동화 하였다.</p>\n<p>근데 하다보니 자동화는 되는거 같은데 시스템의 효율이 안나는걸 느끼게 된다.<br>\n가장 큰 원인을 제공하는게 <strong>VM가상화</strong>를 하기 위해선 <strong>무거운 OS</strong>를 띄어야 한다. 즉, 가벼운 서비스를 하나 띄우기 위해 이보다 더 큰 OS를 띄워야 하는 경우도 생기게 된다.</p>\n<h3 id=\"docker-컨테이너-기술\" style=\"position:relative;\"><a href=\"#docker-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EA%B8%B0%EC%88%A0\" aria-label=\"docker 컨테이너 기술 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker 컨테이너 기술</h3>\n<p><code class=\"language-text\">dotCloud</code> 회사가 내장 리눅스의 자원격리 기술 <strong>컨테이너</strong>라는 이름으로 사용하기 쉽게 만들고 <code class=\"language-text\">docker</code>로 회사 이름을 변경하였다.<br>\n<strong>컨테이너 가상화기술</strong>은 서비스 간에 자원격리를 하는데 OS가 별도로 필요없다.<br>\n<strong>또한 OS 가동시간이 없기 때문에 자동화시에 빠르고, 자원 효율도 매우 높다.</strong></p>\n<p>하지만 도커자체는 <strong>하나의 서비스</strong>를 컨테이너로 가상화시켜서 배포를 하는거지 <strong>많은 서비스들을 운영</strong>할 때 일일이 배포하고 운영하는 역활을 해주진 않는다.</p>\n<h3 id=\"쿠버네티스-오케스트레이터\" style=\"position:relative;\"><a href=\"#%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4-%EC%98%A4%EC%BC%80%EC%8A%A4%ED%8A%B8%EB%A0%88%EC%9D%B4%ED%84%B0\" aria-label=\"쿠버네티스 오케스트레이터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쿠버네티스 오케스트레이터</h3>\n<p><strong>컨테이너 오케스트레이터</strong>: 여러 컨테이너들을 관리해주는 솔루션</p>\n<p>다양한 오케스트레이터 툴들이 존재하지만 쿠버네티스는 오케스트레이터의 사실상 업계 표준</p>\n<h3 id=\"클라우드의-서비스\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C%EC%9D%98-%EC%84%9C%EB%B9%84%EC%8A%A4\" aria-label=\"클라우드의 서비스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클라우드의 서비스</h3>\n<p>쿠버네티스는 오픈소스이기 때문에 다양한 클라우드 회사에서 쿠버네티스가 설치되어 있는 인프라를 서비스하고 있다.<br>\n또한 자신이 직접 쿠버네티스를 설치해 최적화를 시키는 것도 가능하다.</p>\n<h2 id=\"컨테이너의-개념\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EC%9D%98-%EA%B0%9C%EB%85%90\" aria-label=\"컨테이너의 개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨테이너의 개념</h2>\n<p>각각의 컨테이너(이미지) 안에는 서비스를 운영할 수 있는 소스코드와 라이브러리 등이 있다.<br>\n하지만 리눅스의 버전마다 지원하는 라이브러리의 버전이 다를 수 있고, 버전차이, 환경설정 등의 상이한 차이로 인해 서비스 운용이 안될 수 있다.<br>\n이럴 때 도커 엔진만 설치 되어있다면 도커의 자원 격리 기술인 컨테이너 기술을 이용해 컨테이너(이미지)를 개별적으로 분리하고 안정적인 서비스 운용을 가능하게 해준다.<br>\n또한 도커는 여러 컨테이너들 간에 호스트 자원을 분리해서 사용할 수 있도록 도와준다. 이 기술이 리눅스의 고유 기술인 <code class=\"language-text\">namespace</code>와 <code class=\"language-text\">cgroups</code>의 기술이다.</p>\n<ul>\n<li>namespace: mnt, pid, net, ipc, uts, user 등 커널에 관련된 영역을 분리해준다.</li>\n<li>cgroups: memory, CPU, I/O, network 등 자원에 관련된 영역을 분리해준다.</li>\n</ul>\n<br />\n<p><strong>다시말해 OS에서 제공하는 자원격리 기술을 이용해 컨테이너라는 단위로 서비스를 분리할 수 있도록 해주고, 이걸 이용하면 컨테이너 가상화가 깔려있는 OS에서는 개발환경에 대한 걱정없이 배포가 가능하다.</strong></p>\n<ul>\n<li>시스템 구조적으로 컨테이너는 하나의 OS에서 사용, VM은 각각의 OS를 사용</li>\n<li>한 서비스를 만들 때 모듈별로 쪼개서 각각의 컨테이너에 담는 것이 MSA(Micro-Service Architecture)이며 이러한 방식을 권함</li>\n<li><strong>쿠버네티스는 여러 컨테이너들 or 하나의 컨테이너만 파드에 담을 수 있으며, 하나의 최소 배포 단위이다.<br>\n즉, 내가 필요한 파드들만(모듈) 확장이 가능하고 쿠버네티스가 이를 쉽게 도와준다.</strong></li>\n</ul>\n<blockquote>\n<p>예를들어 VM에서 사용하는 가상화 이미지에 서비스를 할 수 있는 모듈이 A, B, C가 있다<br>\n모듈 A, B는 트래픽이 없는 상태이고, 모듈 C에만 과부화가 걸렸을 때 추가적으로 가상화를 구축해줘야 한다.\n이때 VM은 필요하지 않은 A, B 모듈의 자원도 추가적으로 증가하게 된다.<br>\n하지만 컨테이너의 가상화 기술을 이용하게 되면 모듈별로 쪼개어 모듈 C만 따로 자원을 추가할 수 있는 것이다.</p>\n</blockquote>\n<h2 id=\"쿠버네티스-overview\" style=\"position:relative;\"><a href=\"#%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4-overview\" aria-label=\"쿠버네티스 overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쿠버네티스 Overview</h2>\n<p>하나의 클러스터 : 마스터와 여러 노드들로 구성되어 있다.</p>\n<blockquote>\n<p>쿠버네티스를 설치할때 “Master를 설치하고 Node를 설치해서 Master에 연결을 했을 때 우리는 쿠버네티스 클러스터를 하나 만들었다”라고 얘기를 합니다.</p>\n</blockquote>\n<p>마스터: 쿠버네티스의 전반적인 기능 / 노드들을 관리해준다.</p>\n<p>노드 : Node는 실제 App(pod)들이 구동되기 위해 자원을 제공하는역할 / 클러스터의 자원을 늘리고 싶다면 노드들을 추가해주면 된다.</p>\n<p>namespace : 클러스터 안의 namespace는 쿠버네티스 오브젝트들을 독립된 공간으로 분리시켜준다.</p>\n<ul>\n<li>최소 배포단위는 pod가 있고, 외부로부터 연결시켜주는 service가 존재</li>\n<li>서로 다른 네임스페이스끼리 pod 연결이 불가능</li>\n<li>\n<p><code class=\"language-text\">ResourceQuota</code> / <code class=\"language-text\">LimitRange</code>를 설정해줘서 하나의 <code class=\"language-text\">namespace</code> 안에 자원을 한정 시킬 수 있다.</p>\n<ul>\n<li>파드의 개수, CPU, memory 자원을 제한 등</li>\n</ul>\n</li>\n<li><code class=\"language-text\">ConfigMap</code> / <code class=\"language-text\">Secret</code>를 설정해줘서 파드 생성 시 환경변수 값이나 파일을 마운팅 해줄 수 있다.</li>\n<li>\n<p>Controller의 종류와 기능</p>\n<ul>\n<li><code class=\"language-text\">Replication Controller</code>, <code class=\"language-text\">ReplicaSet</code>: Pod 문제 시 자동 재생성<br>\n자동 스케일 인/아웃의 기능</li>\n<li><code class=\"language-text\">Deployment</code>: 배포 후에 파드들을 새 버전으로 업그레이드<br>\n업그레이드시 문제가 생기면 롤백도 쉽게 할 수 있도록 도와준다.</li>\n<li><code class=\"language-text\">DeamonSet</code>: 한 노드의 파드가 하나씩만 유지가 되도록 하게 해준다.</li>\n<li><code class=\"language-text\">CronJob</code>: 주기적으로 어떤 특정 작업만 하고 종료를 해야할 때 파드가 그렇게 동작하도록 도와준다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"참고-사이트\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%82%AC%EC%9D%B4%ED%8A%B8\" aria-label=\"참고 사이트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고 사이트</h2>\n<p><a href=\"https://kubernetes.io/ko/docs/concepts/overview/what-is-kubernetes/\">https://kubernetes.io/ko/docs/concepts/overview/what-is-kubernetes/</a></p>\n<br />\n<a href='#'><small class='up-button'>위로 올라가기💨</small></a>\n<br />","frontmatter":{"title":"#1 Kubernetes 들어가기","date":"January 11, 2021","category":"🧭 Kubernetes"}}},"pageContext":{"slug":"/Kubernetes/1.Kubernetes기초/","previous":{"fields":{"slug":"/infra/vagrant기초/"},"frontmatter":{"title":"Vagrant 기초","category":"🧱 infra","draft":false}},"next":{"fields":{"slug":"/Kubernetes/2.Kubernetes기초실습/"},"frontmatter":{"title":"#2 Linux, Docker, K8S에서 각각 배포해보기","category":"🧭 Kubernetes","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}