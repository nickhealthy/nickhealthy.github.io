{"componentChunkName":"component---src-templates-blog-post-js","path":"/Kubernetes/2.Kubernetes기초실습/","result":{"data":{"site":{"siteMetadata":{"title":"Woo's Dev Log","author":"nickhealthy","siteUrl":"https://nickhealthy.github.io","comment":{"disqusShortName":"","utterances":"nickhealthy/nickhealthy.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"1fb5a1da-908d-542b-9665-6ab1b8090f18","excerpt":"Linux 환경에서의 배포 사전 준비사항 - node 설치  리눅스 안에 node js를 설치하고, 웹 서버를 오픈한 뒤 해당 8000포트로 진입 시 “hello world” 를 출력 Docker 환경에서의 배포 사전 준비사항 - docker 엔진 설치 - node는 설치가 안된 상태  파일 생성  파일 생성  명령어 실행 이전과 똑같이 js 파일을 만들어 주고, node가 설치되어 있지 않은 환경에서 를 이용해 에서 이미지를 다운받아 node를 설치하고 실행 8100포트로 진입 시 “hello…","html":"<h2 id=\"linux-환경에서의-배포\" style=\"position:relative;\"><a href=\"#linux-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C%EC%9D%98-%EB%B0%B0%ED%8F%AC\" aria-label=\"linux 환경에서의 배포 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Linux 환경에서의 배포</h2>\n<h3 id=\"사전-준비사항\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%A0%84-%EC%A4%80%EB%B9%84%EC%82%AC%ED%95%AD\" aria-label=\"사전 준비사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사전 준비사항</h3>\n<p><strong>- node 설치</strong></p>\n<p><code class=\"language-text\">vi hello.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">content</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> resp</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  resp<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello world!'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n  resp<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> w <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span>\nw<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>리눅스 안에 node js를 설치하고, 웹 서버를 오픈한 뒤 해당 8000포트로 진입 시 “hello world” 를 출력</p>\n<h2 id=\"docker-환경에서의-배포\" style=\"position:relative;\"><a href=\"#docker-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C%EC%9D%98-%EB%B0%B0%ED%8F%AC\" aria-label=\"docker 환경에서의 배포 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker 환경에서의 배포</h2>\n<h3 id=\"사전-준비사항-1\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%A0%84-%EC%A4%80%EB%B9%84%EC%82%AC%ED%95%AD-1\" aria-label=\"사전 준비사항 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사전 준비사항</h3>\n<p><strong>- docker 엔진 설치</strong><br>\n<strong>- node는 설치가 안된 상태</strong></p>\n<p><code class=\"language-text\">vi hello.js</code> 파일 생성</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">content</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> resp</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  resp<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello world!'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n  resp<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> w <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span>\nw<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">Dockerfile</code> 파일 생성</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> node.slim <span class=\"token comment\"># node 이미지를 가져와서 node가 설치되어 있는 환경를 구축</span>\n<span class=\"token keyword\">EXPOSE</span> 8000 <span class=\"token comment\"># 8000번 포트를 개방</span>\n<span class=\"token keyword\">COPY</span> hello.js . <span class=\"token comment\"># 현재 폴더 안에 있는 hello.js 파일을 현재 컨테이너의 디렉토리(.)에 복사</span>\n<span class=\"token keyword\">CMD</span> node hello.js <span class=\"token comment\"># 컨테이너가 생성된 후 명령어 실행</span></code></pre></div>\n<p><code class=\"language-text\">SHELL</code> 명령어 실행</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker build -t <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span>:<span class=\"token punctuation\">{</span>tag<span class=\"token punctuation\">}</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token comment\"># Dockerfile를 이미지화 시킴</span>\n<span class=\"token comment\"># -t 옵션은 name:tag 순으로 formatting 해줌</span>\n<span class=\"token comment\"># 버전은 지정하지 않으면 자동으로 latest으로 설정</span>\n<span class=\"token comment\"># . 은 Dockerfile의 이름을 명시해 주었을 때 자동으로 이를 인식함 / 파일이름을 바꾸었다면 해당 파일이름을 기입</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 이미지 확인</span>\n$ docker images</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 이미지를 실행</span>\n$ docker run -d -p <span class=\"token number\">8100</span>:8000 이미지명 또는 이미지ID\n<span class=\"token comment\"># -d 백그라운드로 실행</span>\n<span class=\"token comment\"># -p {개방할 포트}:{타켓 포트}</span></code></pre></div>\n<p>이전과 똑같이 js 파일을 만들어 주고,<br>\nnode가 설치되어 있지 않은 환경에서 <code class=\"language-text\">Dockerfile</code>를 이용해 <code class=\"language-text\">Docker hub</code>에서 이미지를 다운받아 node를 설치하고 실행<br>\n8100포트로 진입 시 “hello world” 를 출력</p>\n<br />\n<p>컨테이너 내부에 <code class=\"language-text\">COPY</code>된 내용 확인</p>\n<p><code class=\"language-text\">SHELL</code> 명령어 실행</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker <span class=\"token builtin class-name\">exec</span> -it 이미지 or 이미지ID bin/bash\n<span class=\"token comment\"># 컨테이너 내부로 진입 후</span>\n<span class=\"token comment\"># ls 명령어를 쳤을 때 hello.js 가 생성되어 있는 것을 확인</span></code></pre></div>\n<p>쿠버네티스에서 사용하기 위해 <code class=\"language-text\">Docker hub</code>에 배포</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker login\n$ docker push 이미지명</code></pre></div>\n<h2 id=\"쿠버네티스-환경에서의-배포\" style=\"position:relative;\"><a href=\"#%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C%EC%9D%98-%EB%B0%B0%ED%8F%AC\" aria-label=\"쿠버네티스 환경에서의 배포 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쿠버네티스 환경에서의 배포</h2>\n<p>Pod 생성</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1 <span class=\"token comment\"># 버전</span>\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod <span class=\"token comment\"># 리소스 타입</span>\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> hello<span class=\"token punctuation\">-</span>pod <span class=\"token comment\"># 파드의 이름</span>\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> hello <span class=\"token comment\"># 파드의 레이블</span>\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> hello<span class=\"token punctuation\">-</span>container <span class=\"token comment\"># 컨테이너 이름</span>\n      <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> image_name <span class=\"token comment\"># 도커 허브에 올린 이미지 이름</span>\n      <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8000</span> <span class=\"token comment\"># 컨테이너 8000번 포트 사용</span></code></pre></div>\n<p>Service 생성</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> hello<span class=\"token punctuation\">-</span>svc\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> hello <span class=\"token comment\"># 위에서 생성한 Pod의 레이블이랑 매칭</span>\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8200</span> <span class=\"token comment\"># 서비스로 개방할 포트</span>\n      <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8000</span> <span class=\"token comment\"># 컨테이너의 포트</span>\n  <span class=\"token key atrule\">externalIPs</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> 192.168.0.30 <span class=\"token comment\"># 외부 IP 설정</span></code></pre></div>\n<p>쿠버네티스와 도커 이미지 파일로 node와 소스코드 등 쉽게 pull해와 서비스 배포를 쉽게 할 수 있었다.<br>\n8100포트로 진입 시 “hello world” 를 출력</p>\n<br />\n<a href='#'><small class='up-button'>위로 올라가기💨</small></a>\n<br />","frontmatter":{"title":"#2 Linux, Docker, K8S에서 각각 배포해보기","date":"January 11, 2021","category":"🧭 Kubernetes"}}},"pageContext":{"slug":"/Kubernetes/2.Kubernetes기초실습/","previous":{"fields":{"slug":"/Kubernetes/1.Kubernetes기초/"},"frontmatter":{"title":"#1 Kubernetes 들어가기","category":"🧭 Kubernetes","draft":false}},"next":{"fields":{"slug":"/solving-algo/[programmers]_기능개발/"},"frontmatter":{"title":"[programmers]기능개발","category":"💯 solving-algo","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}