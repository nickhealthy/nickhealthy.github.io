{"componentChunkName":"component---src-templates-blog-post-js","path":"/docker/Practice - 데이터베이스(MySQL)와 장고 연결하기/","result":{"data":{"site":{"siteMetadata":{"title":"Woo's Dev Log","author":"nickhealthy","siteUrl":"https://nickhealthy.github.io","comment":{"disqusShortName":"","utterances":"nickhealthy/nickhealthy.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"d27ba09c-cdef-5b14-9a45-620436bbc16f","excerpt":"준비사항 도커 컴포즈용 예시 프로젝트 저장소 클론 도커 이미지 빌드 프로젝트의 루트 디렉토리에서 도커 이미지 생성 도커 이미지 확인 Django 앱 컨테이너 실행 Django 앱 컨테이너 실행, 다음 명령은 django-sample…","html":"<h2 id=\"준비사항\" style=\"position:relative;\"><a href=\"#%EC%A4%80%EB%B9%84%EC%82%AC%ED%95%AD\" aria-label=\"준비사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>준비사항</h2>\n<p>도커 컴포즈용 예시 프로젝트 저장소 클론</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> clone https://github.com/raccoonyy/django-sample-for-docker-compose.git</code></pre></div>\n<h2 id=\"도커-이미지-빌드\" style=\"position:relative;\"><a href=\"#%EB%8F%84%EC%BB%A4-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%B9%8C%EB%93%9C\" aria-label=\"도커 이미지 빌드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도커 이미지 빌드</h2>\n<ol>\n<li>프로젝트의 루트 디렉토리에서 도커 이미지 생성</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker build -t django-sample <span class=\"token builtin class-name\">.</span></code></pre></div>\n<ol start=\"2\">\n<li>도커 이미지 확인</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker image <span class=\"token function\">ls</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> django-sample</code></pre></div>\n<h2 id=\"django-앱-컨테이너-실행\" style=\"position:relative;\"><a href=\"#django-%EC%95%B1-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%8B%A4%ED%96%89\" aria-label=\"django 앱 컨테이너 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django 앱 컨테이너 실행</h2>\n<ol>\n<li>Django 앱 컨테이너 실행, 다음 명령은 django-sample 이미지를 컨테이너로 실행하는 명령어</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run -it --rm <span class=\"token punctuation\">\\</span>\n    -p <span class=\"token number\">8000</span>:8000 <span class=\"token punctuation\">\\</span>\n    django-sample <span class=\"token punctuation\">\\</span>\n    ./manage.py runserver <span class=\"token number\">0</span>:8000</code></pre></div>\n<ol start=\"2\">\n<li>데이터베이스에 연결되지 않았기 때문에, 마지막 부분에 에러 화면 표시</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">django.db.utils.OperationalError: could not connect to server: Connection refused\n    Is the server running on <span class=\"token function\">host</span> <span class=\"token string\">\"localhost\"</span> <span class=\"token punctuation\">(</span><span class=\"token number\">127.0</span>.0.1<span class=\"token punctuation\">)</span> and accepting\n    TCP/IP connections on port <span class=\"token number\">5432</span>?\ncould not connect to server: Cannot assign requested address\n    Is the server running on <span class=\"token function\">host</span> <span class=\"token string\">\"localhost\"</span> <span class=\"token punctuation\">(</span>::1<span class=\"token punctuation\">)</span> and accepting\n    TCP/IP connections on port <span class=\"token number\">5432</span>?</code></pre></div>\n<h2 id=\"데이터베이스-컨테이너-실행\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%8B%A4%ED%96%89\" aria-label=\"데이터베이스 컨테이너 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터베이스 컨테이너 실행</h2>\n<p>데이터베이스 컨테이너를 새로 생성한 후 도커 명령어로 실행</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run -it --rm postgres</code></pre></div>\n<ul>\n<li>데이터베이스 서버가 실행되지만, 앱 개발 서버는 여전히 동작하지 않는다.</li>\n</ul>\n<h2 id=\"django앱과-데이터베이스-연결하기\" style=\"position:relative;\"><a href=\"#django%EC%95%B1%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%97%B0%EA%B2%B0%ED%95%98%EA%B8%B0\" aria-label=\"django앱과 데이터베이스 연결하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django앱과 데이터베이스 연결하기</h2>\n<p><strong>기본적으로 도커 컨테이너들은 각각 격리된 환경에서 실행된다.</strong> 다시 말해, 별도의 옵션을 지정하지 않으면 다른 컨테이너의 존재를 알 수 없음. 앞에서는 앱 컨테이너에 별 옵션을 지정하지 않고 실행한 후, 데이터베이스 컨테이너를 실행했다. 따라서 앱 컨테이너는 PostgreSQL 컨테이너가 실행되었는지 여부를 알지 못한다.</p>\n<p>앱 컨테이너에게 데이터베이스 컨테이너의 존재를 알려주기 위해서는 다음 과정을 거쳐야 한다.</p>\n<ol>\n<li>데이터베이스 컨테이너를 실행하면서 컨테이너 이름을 붙이고(db라고 지정),</li>\n<li>앱 컨테이너를 실행할 때 db 컨테이너를 연결해 준다.</li>\n</ol>\n<p>데이터베이스 컨테이너 실행</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run --rm <span class=\"token punctuation\">\\</span>\n    --name db <span class=\"token punctuation\">\\</span>\n    -e <span class=\"token assign-left variable\">POSTGRES_DB</span><span class=\"token operator\">=</span>djangosample <span class=\"token punctuation\">\\</span>\n    -e <span class=\"token assign-left variable\">POSTGRES_USER</span><span class=\"token operator\">=</span>sampleuser <span class=\"token punctuation\">\\</span>\n    -e <span class=\"token assign-left variable\">POSTGRES_PASSWORD</span><span class=\"token operator\">=</span>samplesecret <span class=\"token punctuation\">\\</span>\n    postgres</code></pre></div>\n<ul>\n<li>이번에는 <code class=\"language-text\">-it</code> 옵션을 삭제하여, 컨테이너를 데몬 형태로 실행</li>\n<li><code class=\"language-text\">--name</code>: 데이터베이스 컨테이너에 <code class=\"language-text\">db</code>라는 이름을 붙임</li>\n<li>\n<p><code class=\"language-text\">-e</code>: 환경변수를 설정하여 컨테이너를 실행할 수 있다.</p>\n<ul>\n<li>여기서는 컨테이너 시작과 함께 <code class=\"language-text\">djangosample</code> 데이터베이스를 만들고(<code class=\"language-text\">POSTGRES_DB</code>),</li>\n<li><code class=\"language-text\">sampleuser</code>라는 사용자에게 접속 권한을 부여(<code class=\"language-text\">POSTGRES_USER</code>, <code class=\"language-text\">POSTGRES_PASSWORD</code>)한다.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>참고로, 여기서 설정한 사용자 이름이나 비밀번호, 데이터베이스 이름 같은 환경변수들은 djangosample/settings.py 파일 안에 설정해 둔 기본값들이다.</p>\n</blockquote>\n<p>이제 앱 컨테이너를 실행하면서 <code class=\"language-text\">db</code> 컨테이너를 연결(link)한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run -it --rm <span class=\"token punctuation\">\\</span>\n    -p <span class=\"token number\">8000</span>:8000 <span class=\"token punctuation\">\\</span>\n    --link db <span class=\"token punctuation\">\\</span>\n    -e <span class=\"token assign-left variable\">DJANGO_DB_HOST</span><span class=\"token operator\">=</span>db <span class=\"token punctuation\">\\</span>\n    -e <span class=\"token assign-left variable\">DJANGO_DEBUG</span><span class=\"token operator\">=</span>True <span class=\"token punctuation\">\\</span>\n    django-sample <span class=\"token punctuation\">\\</span>\n    ./manage.py runserver <span class=\"token number\">0</span>:8000</code></pre></div>\n<ul>\n<li><code class=\"language-text\">--link</code>: 참조할 다른 컨테이너를 지정한다.</li>\n</ul>\n<br />\n<blockquote>\n<p>정상적으로 실행되는 것을 확인할 수 있음</p>\n</blockquote>\n<img alt=\"캡처\" src=\"https://user-images.githubusercontent.com/66216102/106259706-ebf5be80-6262-11eb-8ab3-ef00b992e520.PNG\">\n<br />\n<a href='#'><small class='up-button'>위로 올라가기💨</small></a>\n<br />","frontmatter":{"title":"Practice - 데이터베이스(MySQL)와 장고 연결하기","date":"January 29, 2021","category":"🐳 docker"}}},"pageContext":{"slug":"/docker/Practice - 데이터베이스(MySQL)와 장고 연결하기/","previous":{"fields":{"slug":"/linux/리눅스 SSH 접속 방법(SSH 프로토콜 연결 허용 설정하기)/"},"frontmatter":{"title":"리눅스 SSH 접속 방법(SSH 프로토콜 연결 허용 설정하기)","category":"🖥️ linux","draft":false}},"next":{"fields":{"slug":"/Kubernetes/Virtual Machine를 이용한 쿠버네티스 실습 환경 구축/"},"frontmatter":{"title":"Virtual Machine를 이용한 쿠버네티스 실습 환경 구축","category":"🧭 Kubernetes","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}