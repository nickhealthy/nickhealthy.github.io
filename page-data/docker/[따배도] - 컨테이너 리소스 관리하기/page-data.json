{"componentChunkName":"component---src-templates-blog-post-js","path":"/docker/[따배도] - 컨테이너 리소스 관리하기/","result":{"data":{"site":{"siteMetadata":{"title":"Woo's Dev Log","author":"nickhealthy","siteUrl":"https://nickhealthy.github.io","comment":{"disqusShortName":"","utterances":"nickhealthy/nickhealthy.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"721d6596-1d9a-532b-851d-70b69a800cac","excerpt":"컨테이너 리소스 관리 명령어를 배워봅시다. (메모리, CPU, Block I/O, cAdvisor) 컨테이너 하드웨어 리소스 제한 기본적으로 컨테이너는 호스트 하드웨어 리소스의 사용 제한을 받지 않습니다. 컨테이너의 자원을 적절하게 제한해야 효율적인 운영을 실현할 수 있습니다.  명령어를 통해 CPU, Memory, Disk I/O…","html":"<p>컨테이너 리소스 관리 명령어를 배워봅시다.<br>\n(메모리, CPU, Block I/O, cAdvisor)</p>\n<h2 id=\"컨테이너-하드웨어-리소스-제한\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4-%EB%A6%AC%EC%86%8C%EC%8A%A4-%EC%A0%9C%ED%95%9C\" aria-label=\"컨테이너 하드웨어 리소스 제한 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨테이너 하드웨어 리소스 제한</h2>\n<ul>\n<li>\n<p>기본적으로 컨테이너는 호스트 하드웨어 리소스의 사용 제한을 받지 않습니다.</p>\n<ul>\n<li><u>컨테이너의 자원을 적절하게 제한해야 효율적인 운영을 실현할 수 있습니다.</u></li>\n<li><code class=\"language-text\">docker run --help</code> 명령어를 통해 CPU, Memory, Disk I/O를 제한할 수 있음</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"메모리-리소스-제한\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%A6%AC%EC%86%8C%EC%8A%A4-%EC%A0%9C%ED%95%9C\" aria-label=\"메모리 리소스 제한 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메모리 리소스 제한</h3>\n<ul>\n<li>제한 단위는 <code class=\"language-text\">b, k, m, g</code> 로 할당</li>\n<li><code class=\"language-text\">--memory, -m</code> : 컨테이너가 사용할 때 최대 메모리 양을 지정</li>\n<li>\n<p><code class=\"language-text\">--memory-swap</code> : 컨테이너가 사용할 스왑 메모리 영역에 대한 설정</p>\n<ul>\n<li>메모리+<strong>스왑 생략 시 메모리의 2배가 설정됨</strong></li>\n</ul>\n</li>\n<li><code class=\"language-text\">--memory-reservation</code> : —memory 값보다 적은 값으로 구성하는 소프트 제한 값 설정</li>\n<li><code class=\"language-text\">--oom-kill-disable</code> : OOM Kiler가 프로세스 kill 하지 못하도록 보호</li>\n</ul>\n<h3 id=\"cpu-리소스-제한\" style=\"position:relative;\"><a href=\"#cpu-%EB%A6%AC%EC%86%8C%EC%8A%A4-%EC%A0%9C%ED%95%9C\" aria-label=\"cpu 리소스 제한 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CPU 리소스 제한</h3>\n<ul>\n<li><code class=\"language-text\">--cpus</code> : 컨테이너에 할당할 CPU core 수를 지정</li>\n<li><code class=\"language-text\">--cpuset-cpus</code> : 컨테이너가 사용할 수 있는 CPU나 코어를 할당. cpu index는 0부터.</li>\n<li>\n<p><code class=\"language-text\">--cpu-share</code> : 컨테이너가 사용하는 CPU 비중을 1024 값을 기반으로 설정</p>\n<ul>\n<li>—cpu-share 2048 <strong>기본 값보다 두배 많은 CPU 자원을 할당</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"block-io-제한\" style=\"position:relative;\"><a href=\"#block-io-%EC%A0%9C%ED%95%9C\" aria-label=\"block io 제한 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Block I/O 제한</h3>\n<ul>\n<li><code class=\"language-text\">--blkio-weight / blkio-weight-device</code> : Block IO의 Quota를 설정할 수 있으며 100~1000까지 선택, default 500</li>\n<li><code class=\"language-text\">--device-read/write-bps</code> : 특정 디바이스에 대한 읽기와 쓰기 작업의 초당 제한을 kb, mb, gb 단위로 설정</li>\n<li><code class=\"language-text\">--device-read/write-iops</code> : 컨테이너의 read/write 속도의 쿼터를 설정한다.</li>\n</ul>\n<h2 id=\"컨테이너-사용-리소스를-확인하는-모니터링-툴\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%82%AC%EC%9A%A9-%EB%A6%AC%EC%86%8C%EC%8A%A4%EB%A5%BC-%ED%99%95%EC%9D%B8%ED%95%98%EB%8A%94-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81-%ED%88%B4\" aria-label=\"컨테이너 사용 리소스를 확인하는 모니터링 툴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨테이너 사용 리소스를 확인하는 모니터링 툴</h2>\n<h3 id=\"docker-monitoring-commands\" style=\"position:relative;\"><a href=\"#docker-monitoring-commands\" aria-label=\"docker monitoring commands permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>docker monitoring commands</h3>\n<ul>\n<li>\n<p>docker stat : 실행중인 컨테이너의 런타임 통계를 확인</p>\n<ul>\n<li><code class=\"language-text\">docker stats [OPTIONS] [CONTAINER..]</code></li>\n</ul>\n</li>\n<li>docker event : 도커 호스트의 실시간 event 정보를 수집해서 출력</li>\n<li>cAdvisor : 구글에서 만듬</li>\n</ul>\n<h2 id=\"실습\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5\" aria-label=\"실습 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실습</h2>\n<h3 id=\"부하테스트를-통한-리소스-제한-하기\" style=\"position:relative;\"><a href=\"#%EB%B6%80%ED%95%98%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%ED%86%B5%ED%95%9C-%EB%A6%AC%EC%86%8C%EC%8A%A4-%EC%A0%9C%ED%95%9C-%ED%95%98%EA%B8%B0\" aria-label=\"부하테스트를 통한 리소스 제한 하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>부하테스트를 통한 리소스 제한 하기</h3>\n<blockquote>\n<p>부하테스트에서 사용할 컨테이너는 <code class=\"language-text\">stress</code> 툴을 사용</p>\n</blockquote>\n<ul>\n<li>stress 도커 파일 만들기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> debian\n<span class=\"token keyword\">RUN</span> apt<span class=\"token punctuation\">-</span>get update; apt<span class=\"token punctuation\">-</span>get install stress <span class=\"token punctuation\">-</span>y\n<span class=\"token keyword\">CMD</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"stress -c 2\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li>도커 파일 빌드</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker build -t stress <span class=\"token builtin class-name\">.</span></code></pre></div>\n<h3 id=\"메모리-리소스-제한-1\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%A6%AC%EC%86%8C%EC%8A%A4-%EC%A0%9C%ED%95%9C-1\" aria-label=\"메모리 리소스 제한 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메모리 리소스 제한</h3>\n<div class=\"quote-block\">\n<div class=\"quote-block__emoji\">💡</div>\n<div class=\"quote-block__content\" markdown=1>\n<p>Swap Memory</p>\n<p>모든 컴퓨터 운영체제에는 가상메모리라는 것을 사용하게 되는데<br>\n리눅스에서 가상메모리를 <strong>스왑파일시스템</strong>이라고 합니다.</p>\n</div>\n</div>\n<ul>\n<li>\n<p>swap 메모리 용량 제한이 실제 메모리 제한과 어떤 관련성이 있는지 확인해본다.</p>\n<ul>\n<li><code class=\"language-text\">-m</code> : 메모리 지정</li>\n<li><code class=\"language-text\">--memory-swap</code> : 스왑 메모리 지정</li>\n<li>즉, 아래의 예시는 전체적인 메모리 100m 중 스왑 메모리를 100를 줌으로써 스왑 메모리는 이용할 수 없는 것을 의미합니다.(200m 를 지정하였으면 스왑메모리는 100를 사용할 수 있는 것임)</li>\n<li><code class=\"language-text\">stress --vm 1 --vm-bytes 90m -t 5s</code> : stress 툴의 명령어 참고</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run -m 100m --memory-swap 100m stress:latest stress --vm <span class=\"token number\">1</span> --vm-bytes 90m -t 5s</code></pre></div>\n<ul>\n<li>\n<p>할당 된 메모리보다 높은 사용량을 지정하였을 때 실행 검증</p>\n<ul>\n<li>실행이 되지 않는 것을 확인할 수 있음(<code class=\"language-text\">--vm-bytes 150m</code> 부분때문에)</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>가끔 커널의 설정 문제로 메모리 제한 설정이 적용이 안되어서 실행이 되는 경우가 있는데,</p>\n<ol>\n<li>root 사용자로 진입 후 <code class=\"language-text\">/etc/default/grub</code> 파일 수정</li>\n<li>GRUB<em>CMDLINE</em>LINUX<em>DEFAULT=“cgroup</em>enable=memory swapaccount=1” 명령어 추가</li>\n<li><code class=\"language-text\">update-grub</code> 명령어 입력</li>\n<li><code class=\"language-text\">reboot</code> 명령어 입력</li>\n</ol>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run -m 100m --memory-swap 100m stress:latest stress --vm <span class=\"token number\">1</span> --vm-bytes 150m -t 5s</code></pre></div>\n<h3 id=\"oom-killer\" style=\"position:relative;\"><a href=\"#oom-killer\" aria-label=\"oom killer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OOM-killer</h3>\n<div class=\"quote-block\">\n<div class=\"quote-block__emoji\">💡</div>\n<div class=\"quote-block__content\" markdown=1>\n<p>out-of-memory-killer란?</p>\n<p>리눅스에서는 안정적인 서버 운영을 위해 호스트 메모리가 부족하게 되면 프로세스를 강제 종료하게 됩니다.</p>\n</div>\n</div>\n<ul>\n<li>OOM-killer로 강제 종료되는 것을 방지하기 위해 <code class=\"language-text\">--oom-killer-disable=ture</code> 명령을 통해 프로세스 강제 종료를 방지할 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run -d -m 100M --name m4 --oom-kill-disable<span class=\"token operator\">=</span>true nginx</code></pre></div>\n<ul>\n<li>\n<p><code class=\"language-text\">inspect</code> 명령어를 통해 컨테이너 상세 확인</p>\n<ul>\n<li><code class=\"language-text\">&quot;Memory&quot;: 104857600, &quot;MemorySwap&quot;: 209715200,</code> : 스왑메모리 따로 지정을 안해주니 자동적으로 2배로 산정된 것을 확인할 수 있습니다.</li>\n<li><code class=\"language-text\">&quot;OomKillDisable&quot;: true,</code> : OOM-killer가 비활성화 되었습니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker inspect m4</code></pre></div>\n<ul>\n<li>\n<p>컨테이너ID를 직접 조회하는 방식으로 확인</p>\n<ul>\n<li><code class=\"language-text\">oom_kill_disable</code> 이 1 값으로 설정되어 있습니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> /sys/fs/cgroup/memory/docker/6b2d8b686ab6c9c43fb76fa1310ab3c16ea672f86980ed5d53394e42e7f7df26/memory.oom_control</code></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/66216102/127764046-5eb963cd-61d9-48b6-9e27-4947adbd10c2.JPG\" alt=\"1  도커 리소스 아웃오브메모리\"></p>\n<h3 id=\"cpu-리소스-제한-1\" style=\"position:relative;\"><a href=\"#cpu-%EB%A6%AC%EC%86%8C%EC%8A%A4-%EC%A0%9C%ED%95%9C-1\" aria-label=\"cpu 리소스 제한 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CPU 리소스 제한</h3>\n<ul>\n<li>CPU-index를 지정해서 컨테이너 동작시키기(예를 들어 4코어 중 n번째 코어 사용)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run --cpuset-cpus <span class=\"token number\">1</span> --name c1 stress:latest stress --cpu <span class=\"token number\">1</span>\n<span class=\"token comment\"># 0-1 번 중 상황에 따라서 두개 중 하나를 사용</span>\n$ docker run --cpuset-cpus <span class=\"token number\">0</span>-1 --name c1 stress:latest stress --cpu <span class=\"token number\">1</span></code></pre></div>\n<blockquote>\n<p>docker: Error response from daemon: Requested CPUs are not available - requested 1, available: 0.</p>\n<p>위와 같은 오류가 뜨는 것은 cpu가 1개 밖에 없으므로 뜨게 됩니다.</p>\n</blockquote>\n<ul>\n<li>\n<p><code class=\"language-text\">htop</code> 명령어로 CPU 점유율 확인</p>\n<ul>\n<li>현재 CPU가 하나이므로 CPU index가 하나밖에 보이지 않는 상태</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">htop</span></code></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/66216102/127764051-fc4c4b76-c350-4816-991a-cc9c5bc4fedc.JPG\" alt=\"2  cpu 자원률 확인\"></p>\n<ul>\n<li><code class=\"language-text\">--cpu-shares</code> 명령어를 이용해 CPU 상대적 가중치를 할당</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run --cpu-shares <span class=\"token number\">2048</span> --name cload1 -d stress:latest <span class=\"token comment\"># 가장 점유율 높음</span>\n$ docker run --name cload2 -d stress:latest <span class=\"token comment\"># 점유율 보통(1024 기본 값)</span>\n$ docker run -c <span class=\"token number\">512</span> --name cload3 -d stress:latest <span class=\"token comment\"># 점유율 가장 낮음</span></code></pre></div>\n<ul>\n<li>\n<p>모니터링 툴을 이용해 확인해 봅시다.</p>\n<ul>\n<li>CPU 1개를 기준으로 <em>cload1 CPU는 55%, cload2 CPU는 27%, cload3 CPU는 13%</em> 점유율을 각각 할당되어 있음</li>\n<li>상대적으로 비율을 조절하고 있습니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker stats <span class=\"token operator\">&lt;</span>컨테이너 이름 생략 가능<span class=\"token operator\">></span></code></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/66216102/127764052-a32a7dc9-f9b0-4257-ab31-73f249cf5cd1.JPG\" alt=\"3  cpu-shares 자원률 확인\"></p>\n<h3 id=\"block-io-제한-1\" style=\"position:relative;\"><a href=\"#block-io-%EC%A0%9C%ED%95%9C-1\" aria-label=\"block io 제한 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Block I/O 제한</h3>\n<div class=\"quote-block\">\n<div class=\"quote-block__emoji\">💡</div>\n<div class=\"quote-block__content\" markdown=1>\n<p>명령어를 통해 리눅스 스토리지 디바이스 정보를 출력하는 방법</p>\n<p><code class=\"language-text\">lsblk</code> 명령어를 통해 리눅스 디바이스 정보를 출력할 수 있습니다.</p>\n</div>\n</div>\n<ul>\n<li><code class=\"language-text\">lsblk</code> 명령어를 통해 리눅스 스토리지 디바이스 정보 확인</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ lsblk</code></pre></div>\n<ul>\n<li>컨테이너를 하나 만든 뒤, 명령어를 통해 컨테이너 IO의 속도를 조절</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run -it --rm --device-write-iops /dev/xvda:10 ubuntu:latest /bin/bash\n<span class=\"token comment\"># 컨테이너 진입 후</span>\n$ <span class=\"token function\">dd</span> <span class=\"token assign-left variable\">if</span><span class=\"token operator\">=</span>/dev/zero <span class=\"token assign-left variable\">of</span><span class=\"token operator\">=</span>file1 <span class=\"token assign-left variable\">bs</span><span class=\"token operator\">=</span>1M <span class=\"token assign-left variable\">count</span><span class=\"token operator\">=</span><span class=\"token number\">10</span> <span class=\"token assign-left variable\">oflag</span><span class=\"token operator\">=</span>direct\n<span class=\"token comment\"># 컨테이너 나오기</span>\n$ <span class=\"token builtin class-name\">exit</span></code></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/66216102/127764054-c5e389ed-f1cb-4749-a172-09b8f2f59f5d.JPG\" alt=\"4  block i,o 속도 확인\"></p>\n<ul>\n<li>\n<p>조금 더 빠른 IO 컨테이너를 만든 뒤, 속도 비교</p>\n<ul>\n<li><u>위의 컨테이너는 초당 10.4 MB를 만들었지만, 해당 컨테이너는 초당 254MB</u>를 만들면서 IO 속도가 증가한 것을 확인할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run -it --rm --device-write-iops /dev/xvda:100 ubuntu:latest /bin/bash\n<span class=\"token comment\"># 컨테이너 진입 후</span>\n$ <span class=\"token function\">dd</span> <span class=\"token assign-left variable\">if</span><span class=\"token operator\">=</span>/dev/zero <span class=\"token assign-left variable\">of</span><span class=\"token operator\">=</span>file1 <span class=\"token assign-left variable\">bs</span><span class=\"token operator\">=</span>1M <span class=\"token assign-left variable\">count</span><span class=\"token operator\">=</span><span class=\"token number\">10</span> <span class=\"token assign-left variable\">oflag</span><span class=\"token operator\">=</span>direct</code></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/66216102/127764056-c94ac39d-5b61-4c2a-81d7-ee54da856809.JPG\" alt=\"5  block i,o 속도 확인\"></p>\n<h3 id=\"cadvisor-실행\" style=\"position:relative;\"><a href=\"#cadvisor-%EC%8B%A4%ED%96%89\" aria-label=\"cadvisor 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>cAdvisor 실행</h3>\n<ul>\n<li>\n<p>컨테이너 실행</p>\n<ul>\n<li>참고: 스왑 메모리 미지정 상태에서 500MB 할당되어, 스왑 메모리는 2배를 가지게 됨</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run -it --rm --device-write-iops /dev/xvda:100 -m 500m --name c1 -d ubuntu:latest /bin/bash</code></pre></div>\n<ul>\n<li>\n<p>cAdvisor 설치 후, 웹에서 GUI 화면 확인</p>\n<ul>\n<li>참고: cAdvisor는 구글에서 만든 컨테이너 분석 툴입니다.</li>\n<li>쿠버네티스의 kubelet에서는 기본적으로 설치되어 있습니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">VERSION</span><span class=\"token operator\">=</span>v0.36.0 <span class=\"token comment\"># use the latest release version from https://github.com/google/cadvisor/releases</span>\n<span class=\"token function\">sudo</span> docker run <span class=\"token punctuation\">\\</span>\n  --volume<span class=\"token operator\">=</span>/:/rootfs:ro <span class=\"token punctuation\">\\</span>\n  --volume<span class=\"token operator\">=</span>/var/run:/var/run:ro <span class=\"token punctuation\">\\</span>\n  --volume<span class=\"token operator\">=</span>/sys:/sys:ro <span class=\"token punctuation\">\\</span>\n  --volume<span class=\"token operator\">=</span>/var/lib/docker/:/var/lib/docker:ro <span class=\"token punctuation\">\\</span>\n  --volume<span class=\"token operator\">=</span>/dev/disk/:/dev/disk:ro <span class=\"token punctuation\">\\</span>\n  --publish<span class=\"token operator\">=</span><span class=\"token number\">8080</span>:8080 <span class=\"token punctuation\">\\</span>\n  --detach<span class=\"token operator\">=</span>true <span class=\"token punctuation\">\\</span>\n  --name<span class=\"token operator\">=</span>cadvisor <span class=\"token punctuation\">\\</span>\n  --privileged <span class=\"token punctuation\">\\</span>\n  --device<span class=\"token operator\">=</span>/dev/kmsg <span class=\"token punctuation\">\\</span>\n  gcr.io/cadvisor/cadvisor:<span class=\"token variable\">$VERSION</span></code></pre></div>\n<ul>\n<li>\n<p>cAdvisor 접속하기</p>\n<ul>\n<li>웹 브라우저를 통해 접속이 가능합니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>퍼블릭 아이피<span class=\"token operator\">></span>:8080<span class=\"token punctuation\">(</span>포트번호<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"실습-과제\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5-%EA%B3%BC%EC%A0%9C\" aria-label=\"실습 과제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실습 과제</h2>\n<ul>\n<li>\n<p>mysql 이미지를 사용하여</p>\n<ol>\n<li>메모리 200m</li>\n<li>스왑메모리 300m</li>\n<li>CPU 1개 사용한 후</li>\n<li><code class=\"language-text\">docker stats</code> 명령어로 리소스 확인</li>\n</ol>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run --name db -d -p <span class=\"token number\">3306</span>:3306 -e <span class=\"token assign-left variable\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span>pass -m 200m --memory-swap 300m --cpus <span class=\"token number\">1</span> mysql:latest\n<span class=\"token comment\"># 자원 확인</span>\n$ docker stats</code></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/66216102/127764057-62a9cf3b-4982-4c03-803a-2d745fe82451.JPG\" alt=\"6  디비자원화깅ㄴ\"></p>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<p><a href=\"https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&#x26;blogId=dudwo567890&#x26;logNo=130156450500\">swap 메모리 설명</a><br>\n<a href=\"https://www.joinc.co.kr/w/man/12/docker/limits\">swap 메모리 설정</a><br>\n<a href=\"https://klero.tistory.com/entry/%EB%A6%AC%EB%88%85%EC%8A%A4-stress-%ED%88%B4%EC%9D%84-%ED%86%B5%ED%95%B4-CPU-Memory-%EC%8A%A4%ED%8A%B8%EB%A0%88%EC%8A%A4-%EB%B6%80%ED%95%98-%EC%A3%BC%EB%8A%94-%EB%B0%A9%EB%B2%95\">stress 툴 명령어</a><br>\n<a href=\"https://devnot.tistory.com/96\">docker 자원 할당 에러</a><br>\n<a href=\"https://www.lesstif.com/lpt/lsblk-106856724.html\">리눅스 스토리지 디바이스 출력 명령어</a><br>\n<a href=\"https://github.com/google/cadvisor\">cAdvisor-github</a></p>","frontmatter":{"title":"[따배도] - 컨테이너 리소스 관리하기","date":"July 30, 2021","category":"🐳 docker"}}},"pageContext":{"slug":"/docker/[따배도] - 컨테이너 리소스 관리하기/","previous":{"fields":{"slug":"/ncp/NCP VPC서버 생성 & 도커 안에 아파치 웹서버 구동시키기/"},"frontmatter":{"title":"NCP VPC서버 생성 & 도커 안에 아파치 웹서버 구동시키기","category":"🧶 ncp","draft":false}},"next":null}},"staticQueryHashes":["3128451518","521680639"]}