{"componentChunkName":"component---src-templates-blog-post-js","path":"/docker/[따배도] - 컨테이너와 컨테이너 이미지의 구조/","result":{"data":{"site":{"siteMetadata":{"title":"Woo's Dev Log","author":"nickhealthy","siteUrl":"https://nickhealthy.github.io","comment":{"disqusShortName":"","utterances":"nickhealthy/nickhealthy.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"39f1e14f-b6ae-5550-bec1-98cbb39f6d5a","excerpt":"도커 컨테이너 이미지 구조와 간단한 명령어를 연습합니다. 컨테이너 구조 컨테이너는 하나의 Application 프로세스 즉, 실행중인 상태라고 볼 수 있다. 각각의 컨테이너는 자원을 포함한 모든 것이 겪리되어 있다. 컨테이너가 여러 개가 겪리된 상태로 따로 동작하더라도, 리눅스 커널은 단 하나만 이용하는 것이며 자원 또한 하나의 호스트 OS(리눅스 - 우분투 등)의 자원을 나눠서 사용한다. 자원과 커널을 같은 호스트에서 공유해서 사용하지만, 컨테이너 자체는 독립적인 환경 호스트 OS…","html":"<ul>\n<li>도커 컨테이너 이미지 구조와 간단한 명령어를 연습합니다.</li>\n</ul>\n<h2 id=\"컨테이너-구조\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EA%B5%AC%EC%A1%B0\" aria-label=\"컨테이너 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨테이너 구조</h2>\n<ul>\n<li>\n<p>컨테이너는 <strong>하나의 Application 프로세스</strong></p>\n<ul>\n<li><strong><u>즉, 실행중인 상태</u></strong>라고 볼 수 있다.</li>\n<li>각각의 컨테이너는 자원을 포함한 모든 것이 겪리되어 있다.</li>\n</ul>\n</li>\n<li>\n<p>컨테이너가 <strong>여러 개가 겪리된 상태로 따로 동작</strong>하더라도, <u><strong>리눅스 커널은 단 하나만 이용</strong></u>하는 것이며 자원 또한 하나의 호스트 OS(리눅스 - 우분투 등)의 자원을 나눠서 사용한다.</p>\n<ul>\n<li>자원과 커널을 같은 호스트에서 공유해서 사용하지만, 컨테이너 자체는 <strong>독립적인 환경</strong></li>\n<li>호스트 OS에서 프로세스는 <u><strong>단 하나로만 취급한다.(도커 엔진)</strong></u></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"컨테이너-이미지-구조\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EA%B5%AC%EC%A1%B0\" aria-label=\"컨테이너 이미지 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨테이너 이미지 구조</h2>\n<ul>\n<li>\n<p>실제로 작동하는 상태가 아닌, 애플리케이션을 설계해 놓고, freezing 한 상태라고 볼 수 있다.</p>\n<ul>\n<li><em>Read-Only</em> 구조를 가진다.</li>\n</ul>\n</li>\n<li>\n<p>컨테이너 이미지는 1개 이상의 레이어로 구성될 수 있으며, <strong>하나의 Application이 잘 실행될 수 있도록</strong> 모아져 있는 <strong>이미지들의 조합</strong>이 컨테이너 이미지가 된다.</p>\n<ul>\n<li>각각의 Layer들은(하나의 이미지) <strong><u>각각의 파일들로 저장된다.</u></strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"이미지-레이어-구조의-용어\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%A0%88%EC%9D%B4%EC%96%B4-%EA%B5%AC%EC%A1%B0%EC%9D%98-%EC%9A%A9%EC%96%B4\" aria-label=\"이미지 레이어 구조의 용어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이미지 레이어 구조의 용어</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">base image Layer</code> : <u><strong>환경을 구축할 때 사용 하는 것</strong></u>이며, 여러 개를 쌓기 때문에 계층형이라 부른다.</p>\n<ul>\n<li>ex) node.js, python etc.. 등 즉, <code class=\"language-text\">FROM</code> 명령어 부분을 담당</li>\n</ul>\n</li>\n<li><code class=\"language-text\">source image Layer</code> : 구축된 환경에서 애플리케이션을 실행하기 위한 <u><strong>실제 소스코드</strong></u></li>\n<li>시스템 구조적으로 봤을 때 각각의 Layer들은 <u><strong>UUID 형태</strong></u>로 저장된다.</li>\n</ul>\n<h2 id=\"컨테이너-동작방식\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D\" aria-label=\"컨테이너 동작방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨테이너 동작방식</h2>\n<ol>\n<li>\n<p>도커 허브나 회사 허브에서 도커 이미지를 받아온다.</p>\n<ul>\n<li><strong>다운 받은 이미지들은 <u>호스트 OS 파일 시스템</u>에 저장된다.</strong></li>\n</ul>\n</li>\n<li>도커 이미지를 커스터마이징 한다.</li>\n<li>커스터마이징 된 도커 이미지를 생성 및 실행하여 컨테이너로 만든다.</li>\n</ol>\n<h2 id=\"실습\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5\" aria-label=\"실습 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실습</h2>\n<blockquote>\n<p>실습 전 아래 명령어를 입력하여 권한 오류를 수정<br>\n(기본적으로 설치 시 root 계정만 권한을 가지는 것을 유저에게 할당해주는 것)<br>\n<code class=\"language-text\">sudo chmod 666 /var/run/docker.sock</code> 또는 <code class=\"language-text\">sudo chown root:docker /var/run/docker.sock</code></p>\n</blockquote>\n<ul>\n<li>\n<p>도커 허브에서 이미지 검색</p>\n<ul>\n<li>검색은 stars 순으로 나타난다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker search <span class=\"token operator\">&lt;</span>찾을 이미지 이름<span class=\"token operator\">></span></code></pre></div>\n<ul>\n<li>\n<p>컨테이너 이미지 레이어가 저장되는 곳</p>\n<ul>\n<li>다운 받은 레이어(각 이미지)들이 모여있는 것을 확인할 수 있다.</li>\n<li>root 계정으로 확인</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> /var/lib/docker/overlay2 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">ls</span> -l</code></pre></div>\n<ul>\n<li>공식 nginx 이미지 도커 허브에서 다운로드 후, 이미지 레이어 확인</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker pull nginx\n$ /var/lib/docker/overlay2: <span class=\"token function\">ls</span> -l <span class=\"token comment\"># 검색해보면 nginx 이미지 구성에 필요한 레이어들을 확인 가능</span></code></pre></div>\n<ul>\n<li>\n<p>컨테이너 실행 및 실행중인 컨테이너 확인</p>\n<ul>\n<li><code class=\"language-text\">--name</code> : 컨테이너 이름</li>\n<li><code class=\"language-text\">-d</code> : 데몬으로 실행</li>\n<li><code class=\"language-text\">-p</code> : 포트포워딩</li>\n<li><code class=\"language-text\">nginx</code> : nginx 이미지 사용</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run --name web -d -p <span class=\"token number\">80</span>:80 nginx\n$ docker <span class=\"token function\">ps</span> <span class=\"token comment\"># - 실행중인 컨테이너 목록 확인</span></code></pre></div>\n<ul>\n<li>\n<p>nginx 서비스를 이용해보기</p>\n<ul>\n<li>위에서 80 포트를 열어놨으니 <code class=\"language-text\">curl</code> 명령어를 통해 80 포트로 진입</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> localhost:80 <span class=\"token comment\"># nginx 초기 설정 화면을 볼 수 있음</span></code></pre></div>","frontmatter":{"title":"[따배도] - 컨테이너와 컨테이너 이미지의 구조","date":"July 14, 2021","category":"🐳 docker"}}},"pageContext":{"slug":"/docker/[따배도] - 컨테이너와 컨테이너 이미지의 구조/","previous":{"fields":{"slug":"/docker/[따배도] - 도커 컨테이너 설치/"},"frontmatter":{"title":"[따배도] - 도커 컨테이너 설치","category":"🐳 docker","draft":false}},"next":{"fields":{"slug":"/study/1장 - NCA 대비 서비스 개요/"},"frontmatter":{"title":"1장 - NCA 대비 서비스 개요","category":"📚 study","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}