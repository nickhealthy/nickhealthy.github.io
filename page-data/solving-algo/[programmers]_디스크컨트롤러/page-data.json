{"componentChunkName":"component---src-templates-blog-post-js","path":"/solving-algo/[programmers]_디스크컨트롤러/","result":{"data":{"site":{"siteMetadata":{"title":"Woo's Dev Log","author":"nickhealthy","siteUrl":"https://nickhealthy.github.io","comment":{"disqusShortName":"","utterances":"nickhealthy/nickhealthy.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"516ba813-5346-5f0a-beec-850b0e9d9eb9","excerpt":"Algorithm, Python, heap 문제 설명 하드디스크는 한 번에 하나의 작업만 수행할 수 있습니다. 디스크 컨트롤러를 구현하는 방법은 여러 가지가 있습니다. 가장 일반적인 방법은 요청이 들어온 순서대로 처리하는 것입니다. 예를들어 와 같은 요청이 들어왔습니다. 이를 그림으로 표현하면 아래와 같습니다.\nScreen Shot 2018-09-13 at 6.34.58 PM.png…","html":"<blockquote>\n<p>Algorithm, Python, heap</p>\n</blockquote>\n<h2 id=\"문제-설명\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\" aria-label=\"문제 설명 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 설명</h2>\n<p>하드디스크는 한 번에 하나의 작업만 수행할 수 있습니다. 디스크 컨트롤러를 구현하는 방법은 여러 가지가 있습니다. 가장 일반적인 방법은 요청이 들어온 순서대로 처리하는 것입니다.</p>\n<p>예를들어</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 0ms 시점에 3ms가 소요되는 A작업 요청\n- 1ms 시점에 9ms가 소요되는 B작업 요청\n- 2ms 시점에 6ms가 소요되는 C작업 요청</code></pre></div>\n<p>와 같은 요청이 들어왔습니다. 이를 그림으로 표현하면 아래와 같습니다.\n<img src=\"https://grepp-programmers.s3.amazonaws.com/files/production/b68eb5cec6/38dc6a53-2d21-4c72-90ac-f059729c51d5.png\" alt=\"Screen Shot 2018-09-13 at 6.34.58 PM.png\"></p>\n<p>한 번에 하나의 요청만을 수행할 수 있기 때문에 각각의 작업을 요청받은 순서대로 처리하면 다음과 같이 처리 됩니다.\n<img src=\"https://grepp-programmers.s3.amazonaws.com/files/production/5e677b4646/90b91fde-cac4-42c1-98b8-8f8431c52dcf.png\" alt=\"Screen Shot 2018-09-13 at 6.38.52 PM.png\"></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- A: 3ms 시점에 작업 완료 (요청에서 종료까지 : 3ms)\n- B: 1ms부터 대기하다가, 3ms 시점에 작업을 시작해서 12ms 시점에 작업 완료(요청에서 종료까지 : 11ms)\n- C: 2ms부터 대기하다가, 12ms 시점에 작업을 시작해서 18ms 시점에 작업 완료(요청에서 종료까지 : 16ms)</code></pre></div>\n<p>이 때 각 작업의 요청부터 종료까지 걸린 시간의 평균은 10ms(= (3 + 11 + 16) / 3)가 됩니다.</p>\n<p>하지만 A → C → B 순서대로 처리하면\n<img src=\"https://grepp-programmers.s3.amazonaws.com/files/production/9eb7c5a6f1/a6cff04d-86bb-4b5b-98bf-6359158940ac.png\" alt=\"Screen Shot 2018-09-13 at 6.41.42 PM.png\"></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- A: 3ms 시점에 작업 완료(요청에서 종료까지 : 3ms)\n- C: 2ms부터 대기하다가, 3ms 시점에 작업을 시작해서 9ms 시점에 작업 완료(요청에서 종료까지 : 7ms)\n- B: 1ms부터 대기하다가, 9ms 시점에 작업을 시작해서 18ms 시점에 작업 완료(요청에서 종료까지 : 17ms)</code></pre></div>\n<p>이렇게 A → C → B의 순서로 처리하면 각 작업의 요청부터 종료까지 걸린 시간의 평균은 9ms(= (3 + 7 + 17) / 3)가 됩니다.</p>\n<p>각 작업에 대해 [작업이 요청되는 시점, 작업의 소요시간]을 담은 2차원 배열 jobs가 매개변수로 주어질 때, 작업의 요청부터 종료까지 걸린 시간의 평균을 가장 줄이는 방법으로 처리하면 평균이 얼마가 되는지 return 하도록 solution 함수를 작성해주세요. (단, 소수점 이하의 수는 버립니다)</p>\n<h4 id=\"제한-사항\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%ED%95%9C-%EC%82%AC%ED%95%AD\" aria-label=\"제한 사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제한 사항</h4>\n<ul>\n<li>jobs의 길이는 1 이상 500 이하입니다.</li>\n<li>jobs의 각 행은 하나의 작업에 대한 [작업이 요청되는 시점, 작업의 소요시간] 입니다.</li>\n<li>각 작업에 대해 작업이 요청되는 시간은 0 이상 1,000 이하입니다.</li>\n<li>각 작업에 대해 작업의 소요시간은 1 이상 1,000 이하입니다.</li>\n<li>하드디스크가 작업을 수행하고 있지 않을 때에는 먼저 요청이 들어온 작업부터 처리합니다.</li>\n</ul>\n<h5 id=\"입출력-예\" style=\"position:relative;\"><a href=\"#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%98%88\" aria-label=\"입출력 예 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>입출력 예</h5>\n<table>\n<thead>\n<tr>\n<th>jobs</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[[0, 3], [1, 9], [2, 6]]</td>\n<td>9</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"입출력-예-설명\" style=\"position:relative;\"><a href=\"#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%98%88-%EC%84%A4%EB%AA%85\" aria-label=\"입출력 예 설명 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>입출력 예 설명</h5>\n<p>문제에 주어진 예와 같습니다.</p>\n<ul>\n<li>0ms 시점에 3ms 걸리는 작업 요청이 들어옵니다.</li>\n<li>1ms 시점에 9ms 걸리는 작업 요청이 들어옵니다.</li>\n<li>2ms 시점에 6ms 걸리는 작업 요청이 들어옵니다.</li>\n</ul>\n<br/>\n<h2 id=\"my-solution\" style=\"position:relative;\"><a href=\"#my-solution\" aria-label=\"my solution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>My Solution</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>jobs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    count<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">,</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n    heap <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\"># 시작시간 초기화</span>\n    time <span class=\"token operator\">=</span> jobs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">while</span> count <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>jobs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> s<span class=\"token punctuation\">,</span> t <span class=\"token keyword\">in</span> jobs<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> last <span class=\"token operator\">&lt;</span> s <span class=\"token operator\">&lt;=</span> time<span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># 작업 소요시간으로 min heap을 만들기 위해 (t, s) 푸시</span>\n                heapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 바로 수행할 수 있는 작업이 있는 경우</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            last <span class=\"token operator\">=</span> time\n            term<span class=\"token punctuation\">,</span> start <span class=\"token operator\">=</span> heapq<span class=\"token punctuation\">.</span>heappop<span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">)</span>\n            time <span class=\"token operator\">+=</span> term\n            answer <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>time <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 바로 수행할 수 있는 작업이 없는 경우</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            time <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> answer<span class=\"token operator\">//</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>jobs<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"문제풀이\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B4\" aria-label=\"문제풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제풀이</h2>\n<p>먼저 들어오는 작업을 먼저 수행했을 때 긴 작업이 중간에 들어올 경우 이후에 들어온 작업들의 대기 시간이 길어지게 되며, 평균 값 또한 올라간다.<br>\n따라서 짧은 요청을 먼저 수행하는 방법을 써야하고, 별도의 정렬이 없어도 작은 값을 반환해줄 수 있는 <code class=\"language-text\">Heap</code> 구조를 이용해서 문제를 풀었다.</p>\n<br />\n<a href='#'><small class='up-button'>위로 올라가기💨</small></a>\n<br />","frontmatter":{"title":"[programmers]디스크 컨트롤러","date":"January 18, 2021","category":"💯 solving-algo"}}},"pageContext":{"slug":"/solving-algo/[programmers]_디스크컨트롤러/","previous":{"fields":{"slug":"/solving-algo/[programmers]_더맵게/"},"frontmatter":{"title":"[programmers]더맵게","category":"💯 solving-algo","draft":false}},"next":{"fields":{"slug":"/Kubernetes/6.Kubernetes_Controller/"},"frontmatter":{"title":"#6 Kubernetes Controller(ReplicaSet, Deployment, DeamonSet, Job, CronJob)","category":"🧭 Kubernetes","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}