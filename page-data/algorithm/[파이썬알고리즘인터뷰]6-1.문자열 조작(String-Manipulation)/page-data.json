{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/[파이썬알고리즘인터뷰]6-1.문자열 조작(String-Manipulation)/","result":{"data":{"site":{"siteMetadata":{"title":"Woo's Dev Log","author":"nickhealthy","siteUrl":"https://nickhealthy.github.io","comment":{"disqusShortName":"","utterances":"nickhealthy/nickhealthy.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"b41575e9-e800-53f6-a140-69b54581852d","excerpt":"가장 흔한 단어 금지된 단어를 제외한 가장 흔하게 등장하는 단어를 출력하라. 대소문자 구분을 하지 않으며, 구두점(마침표, 쉼표 등) 또한 무시한다. 풀이 1 - colletions.defaultdict(int) dict() 형태의 출력 값으로 풀었다. re.sub()의  는 not를 의미 는 단어 문자(Word Character) 즉, 단어 문자가 아닌 것들은 모두 공백 처리 풀이 2 - collentions.Counter Counter…","html":"<h1 id=\"가장-흔한-단어\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%9E%A5-%ED%9D%94%ED%95%9C-%EB%8B%A8%EC%96%B4\" aria-label=\"가장 흔한 단어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가장 흔한 단어</h1>\n<p>금지된 단어를 제외한 가장 흔하게 등장하는 단어를 출력하라. 대소문자 구분을 하지 않으며, 구두점(마침표, 쉼표 등) 또한 무시한다.</p>\n<h3 id=\"풀이-1---colletionsdefaultdictint\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4-1---colletionsdefaultdictint\" aria-label=\"풀이 1   colletionsdefaultdictint permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이 1 - colletions.defaultdict(int)</h3>\n<p>dict() 형태의 출력 값으로 풀었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> re\n<span class=\"token keyword\">import</span> collections\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">mostCommonWord</span><span class=\"token punctuation\">(</span>paragraph<span class=\"token punctuation\">,</span> banned<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 데이터 클렌징(Data Cleansing)이라 부르는 입력값에 대한 전처리(Preprocessing) 작업</span>\n\t<span class=\"token comment\"># 구두점(쉼표, 마침표 등 제거)</span>\n\t<span class=\"token comment\"># banned를 가지고 있는 단어 제거</span>\n    words <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>word <span class=\"token keyword\">for</span> word <span class=\"token keyword\">in</span> re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">r'[^\\w]'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> paragraph<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> word <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> banned<span class=\"token punctuation\">]</span>\n\n\t<span class=\"token comment\"># 키 값이 없어도 카운팅이 되도록 defaultdict(int) int 기본 값이 자동으로 부여되게 설정</span>\n    counts <span class=\"token operator\">=</span> collections<span class=\"token punctuation\">.</span>defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> word <span class=\"token keyword\">in</span> words<span class=\"token punctuation\">:</span>\n        counts<span class=\"token punctuation\">[</span>word<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token comment\"># dict에서 최대값 출력</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>counts<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span>counts<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>mostCommonWord<span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob hit a ball, the hit BALL flew far after it was hit.\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hit\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># print(\"Bob hit a ball, the hit BALL flew far after it was hit.\".lower().split())</span></code></pre></div>\n<blockquote>\n<p>re.sub()의 <code class=\"language-text\">&#39;[^\\ㅈ]&#39;</code></p>\n<ul>\n<li><code class=\"language-text\">^</code>는 not를 의미</li>\n<li><code class=\"language-text\">\\w</code>는 단어 문자(Word Character)</li>\n</ul>\n<p>즉, 단어 문자가 아닌 것들은 모두 공백 처리</p>\n</blockquote>\n<h3 id=\"풀이-2---collentionscounter\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4-2---collentionscounter\" aria-label=\"풀이 2   collentionscounter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이 2 - collentions.Counter</h3>\n<p>Counter 이라는 메서드를 이용해 키 값을 기준으로 개수를 뽑아내고, most_comon() 메서드로 가장 큰 값을 return</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> re\n<span class=\"token keyword\">import</span> collections\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">mostCommonWord</span><span class=\"token punctuation\">(</span>paragraph<span class=\"token punctuation\">,</span> banned<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    words <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>word <span class=\"token keyword\">for</span> word <span class=\"token keyword\">in</span> re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">r'[^\\w]'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> paragraph<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> word <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> banned<span class=\"token punctuation\">]</span>\n\n    counts <span class=\"token operator\">=</span> collections<span class=\"token punctuation\">.</span>Counter<span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> counts<span class=\"token punctuation\">.</span>most_common<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>mostCommonWord<span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob hit a ball, the hit BALL flew far after it was hit.\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hit\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h1 id=\"그룹-애너그램\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A3%B9-%EC%95%A0%EB%84%88%EA%B7%B8%EB%9E%A8\" aria-label=\"그룹 애너그램 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그룹 애너그램</h1>\n<p>문자열 배열을 받아 애너그램 단위로 그룹핑하라.</p>\n<blockquote>\n<p>일종의 언어유희로 문자를 재배열하여 다른 뜻을 가진 단어로 바꾸는 것을 말합니다.</p>\n</blockquote>\n<h3 id=\"tip\" style=\"position:relative;\"><a href=\"#tip\" aria-label=\"tip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TIP</h3>\n<p><strong>애너그램을 판단하는 가장 간단한 방법은 정렬하는 것입니다.</strong> 애너그램 관계인 단어들을 정렬하면, 서로 같은 값을 가지기 때문입니다.</p>\n<h3 id=\"풀이---정렬하여-딕셔너리에-추가\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4---%EC%A0%95%EB%A0%AC%ED%95%98%EC%97%AC-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC%EC%97%90-%EC%B6%94%EA%B0%80\" aria-label=\"풀이   정렬하여 딕셔너리에 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이 - 정렬하여 딕셔너리에 추가</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> collections\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">groupAnagrams</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    anagrams <span class=\"token operator\">=</span> collections<span class=\"token punctuation\">.</span>defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># sorted()로 정렬한 후, 같은 단어로(==애너그램) 키 값으로(''join) 이용한다.</span>\n    <span class=\"token keyword\">for</span> char <span class=\"token keyword\">in</span> strs<span class=\"token punctuation\">:</span>\n        anagrams<span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\"># 결과만 출력</span>\n    <span class=\"token keyword\">return</span> anagrams<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>groupAnagrams<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"eat\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"tea\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"tan\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ate\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"nat\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bat\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>sorted() 함수는 리스트 형태로 결과 값을 출력하니 <code class=\"language-text\">&#39;&#39;.join()</code> 으로 다시 묶어 같은 키 값으로 지정합니다.</p>\n</blockquote>\n<h1 id=\"여러가지-정렬-방법\" style=\"position:relative;\"><a href=\"#%EC%97%AC%EB%9F%AC%EA%B0%80%EC%A7%80-%EC%A0%95%EB%A0%AC-%EB%B0%A9%EB%B2%95\" aria-label=\"여러가지 정렬 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>여러가지 정렬 방법</h1>\n<p>파이썬은 기본적으로 <strong>팀소트(Timsort) 정렬</strong>을 사용한다.</p>\n<h3 id=\"정렬-알고리즘-종류\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A0%AC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%A2%85%EB%A5%98\" aria-label=\"정렬 알고리즘 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정렬 알고리즘 종류</h3>\n<ul>\n<li>큌 정렬</li>\n<li>병합 정렬</li>\n<li>팀소트</li>\n</ul>\n<h3 id=\"제자리-정렬in-place-sort\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EC%9E%90%EB%A6%AC-%EC%A0%95%EB%A0%ACin-place-sort\" aria-label=\"제자리 정렬in place sort permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제자리 정렬(In-place-Sort)</h3>\n<ul>\n<li><code class=\"language-text\">sort()</code>: 리스트 함수의 메서드</li>\n<li><code class=\"language-text\">sorted()</code>: 함수를 따로 제공</li>\n</ul>\n<blockquote>\n<p>둘의 차이점은 <code class=\"language-text\">sort()</code> 함수는 return 값이 None이며, <code class=\"language-text\">sorted()</code>는 결과 값을 list로 출력<br>\n또한 sorted()는 <code class=\"language-text\">key=</code> 옵션을 지정해서 키 또는 함수를 별도로 지정이 가능 ex) <code class=\"language-text\">sorted(list, key=len)</code></p>\n</blockquote>\n<h1 id=\"가장-긴-팰린드롬-부분-문자열\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%9E%A5-%EA%B8%B4-%ED%8C%B0%EB%A6%B0%EB%93%9C%EB%A1%AC-%EB%B6%80%EB%B6%84-%EB%AC%B8%EC%9E%90%EC%97%B4\" aria-label=\"가장 긴 팰린드롬 부분 문자열 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가장 긴 팰린드롬 부분 문자열</h1>\n<p>가장 긴 팰린드롬 부분 문자열을 출력하라.</p>\n<h3 id=\"풀이-1---중앙을-중심으로-확장하는-투-포인터\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4-1---%EC%A4%91%EC%95%99%EC%9D%84-%EC%A4%91%EC%8B%AC%EC%9C%BC%EB%A1%9C-%ED%99%95%EC%9E%A5%ED%95%98%EB%8A%94-%ED%88%AC-%ED%8F%AC%EC%9D%B8%ED%84%B0\" aria-label=\"풀이 1   중앙을 중심으로 확장하는 투 포인터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이 1 - 중앙을 중심으로 확장하는 투 포인터</h3>\n<p>매칭이 될 때 중앙을 중심으로 점점 확장해 가면서 가장 긴 팰린드롬을 확인</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">longestPalindrome</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   <span class=\"token comment\"># 팰린드롬 판별 및 투 포인터 확장</span>\n   <span class=\"token comment\"># 팰린드롬일 시 중앙 값을 지정한 후, left, right 하나씩을 투포인터 형식으로 늘려나감</span>\n   <span class=\"token keyword\">def</span> <span class=\"token function\">expand</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n       <span class=\"token keyword\">while</span> left <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> right <span class=\"token operator\">&lt;=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> s<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">[</span>right <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n           left <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n           right <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n       <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">[</span>left <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> right <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n   <span class=\"token comment\"># 해당 사항이 없을 땐 빠르게 리턴</span>\n   <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token keyword\">or</span> s <span class=\"token operator\">==</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n       <span class=\"token keyword\">return</span> s\n\n   result <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n   <span class=\"token comment\"># 슬라이싱 윈도우 우측으로 이동</span>\n   <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n       result <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span>\n                   expand<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                   expand<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                   key<span class=\"token operator\">=</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> result\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>longestPalindrome<span class=\"token punctuation\">(</span><span class=\"token string\">\"babad\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h1 id=\"유니코드와-utf-8\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EB%8B%88%EC%BD%94%EB%93%9C%EC%99%80-utf-8\" aria-label=\"유니코드와 utf 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유니코드와 UTF-8</h1>\n<p>초기에 문자를 대표하는 방식은 <strong>아스키코드(ASCII)</strong>이다. 1byte에 모든 문자를 표현했는데 1bit는 심지어 체크섬(Checksum)으로 제외해서 총 128글자로 문자를 표현한다. 한글이나 한자 같은 문자는 2개 이상의 특수 문자를 합쳐서 표현하다보니 비정상적인 방법이고 글자가 깨지는 경우가 많다. 이런 문제를 해결하기 위해 나온 것이 <strong>유니코드(Unicode)</strong>이다. 하지만 유니코드는 2bytes 이상을 갖기 때문에 영문자 등을 표현할 땐 아스키코드가 유리해 메모리 낭비 또한 심하다는 문제점이 있다. 그래서 <strong>유니코드의 가변 길이 문자를 인코딩하는 방식이 UTF-8</strong>이다.</p>\n<h3 id=\"utf-8과-python\" style=\"position:relative;\"><a href=\"#utf-8%EA%B3%BC-python\" aria-label=\"utf 8과 python permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>UTF-8과 python</h3>\n<p>UTF-8은 유니코드 값에 따라 가변적으로 바이트를 결정하여 불필요한 공간 낭비를 줄인다. 파이썬은 유니코드로 모든 문자열을 표현한다. 하지만 유니코드를 가변적으로 인코딩하는 UTF-8은 이용하지 않는다. 이유는 개별적으로 인코딩한다면 <strong>각 문자마다 바이트 길이가 달라지기 때문이다.</strong> 바이트 길이가 달라지게 된다면 인덱싱을 빠르게 할 수가 없다. 그래서 해결 법으로 각 문자마다 범위에 따라 <strong>고정 인코딩 방식</strong>을 채택해 사용한다.</p>\n<br />\n<a href='#'><small class='up-button'>위로 올라가기💨</small></a>\n<br />","frontmatter":{"title":"[파이썬알고리즘인터뷰]#6-1 문자열 조작(String Manipulation)","date":"February 12, 2021","category":"🔥 algorithm"}}},"pageContext":{"slug":"/algorithm/[파이썬알고리즘인터뷰]6-1.문자열 조작(String-Manipulation)/","previous":{"fields":{"slug":"/jenkins/automation-server(AWS-EC2) 생성 및 GitHub Webhook 연동/"},"frontmatter":{"title":"automation-server(AWS-EC2) 생성 및 GitHub Webhook 연동","category":"👨‍🍳 jenkins","draft":false}},"next":{"fields":{"slug":"/solving-algo/[리트코드]/[리트코드]_5.Longest Palindromic Substring/"},"frontmatter":{"title":"[리트코드] 5.Longest Palindromic Substring","category":"💯 solving-algo","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}