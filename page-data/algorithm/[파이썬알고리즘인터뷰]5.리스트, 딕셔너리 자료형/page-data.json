{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/[파이썬알고리즘인터뷰]5.리스트, 딕셔너리 자료형/","result":{"data":{"site":{"siteMetadata":{"title":"Woo's Dev Log","author":"nickhealthy","siteUrl":"https://nickhealthy.github.io","comment":{"disqusShortName":"","utterances":"nickhealthy/nickhealthy.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"bb0501b2-a383-5f6e-9dee-6c9a15590e8c","excerpt":"리스트 리스트(List)는 말 그대로 순서대로 저장하는 시퀸스이자 변경 가능한 목록(Mutable List…","html":"<h1 id=\"리스트\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%8A%A4%ED%8A%B8\" aria-label=\"리스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리스트</h1>\n<p>리스트(List)는 말 그대로 <strong>순서대로 저장하는 시퀸스</strong>이자 <strong>변경 가능한 목록(Mutable List)</strong>이다.</p>\n<p>특징은 다음과 같다.</p>\n<ul>\n<li>\n<p>입력 순서가 유지된다.</p>\n<ul>\n<li>연속된 공간에 요소를 배치하는 배열의 장점과 다양한 타입을 연결해 배치하는 연결 리스트의 장점을 모두 취한 듯한 형태이다.</li>\n</ul>\n</li>\n<li>\n<p>파이썬은 모든 것이 객체이며 리스트 또한 마찮가지이다.</p>\n<ul>\n<li>연결 리스트에 대한 포인터 목록을 배열 형태로 관리한다.</li>\n<li>자료형의 크기는 저마다 서로 다르기 때문에 이들을 연속된 메모리 공간에 할당하는 것은 불가능하다.</li>\n</ul>\n</li>\n<li>\n<p>내부적으로는 동적 배열로 구현되어 있다.</p>\n<ul>\n<li>C에서는 vector, 자바는 ArrayList 와 같다.</li>\n</ul>\n</li>\n<li>리스트 자료형을 이용하면 <strong>스택, 큐</strong>를 한번에 구현이 가능하다.</li>\n</ul>\n<p>[리스트의 주요 연산 시간 복잡도]</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">연산</th>\n<th align=\"center\">시간 복잡도</th>\n<th align=\"center\">설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">len(a)</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">전체 요소의 개수를 리턴한다.</td>\n</tr>\n<tr>\n<td align=\"center\">a[i]</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">인덱스 i의 요소를 가져온다.</td>\n</tr>\n<tr>\n<td align=\"center\">a[i:j]</td>\n<td align=\"center\">O(k)</td>\n<td align=\"center\">i부터 j까지 슬라이스의 길이만틈인 k개의 요소를 가져온다. <br />이경우 객체 k개에 대한 조회가 필요하므로 O(k)이다.</td>\n</tr>\n<tr>\n<td align=\"center\">elem in a</td>\n<td align=\"center\">O(n)</td>\n<td align=\"center\">elem 요소가 존재하는지 확인한다.<br />처음부터 순차 탐색하므로 n만큼 시간이 소요된다.</td>\n</tr>\n<tr>\n<td align=\"center\">a.count(elem)</td>\n<td align=\"center\">O(n)</td>\n<td align=\"center\">elem 요소의 개수를 리턴한다.</td>\n</tr>\n<tr>\n<td align=\"center\">a.indxe(elem)</td>\n<td align=\"center\">O(n)</td>\n<td align=\"center\">elem 요소의 인덱스를 리턴한다.</td>\n</tr>\n<tr>\n<td align=\"center\">a.append(elem)</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">리스트 마지막에 elem 요소를 추가한다.</td>\n</tr>\n<tr>\n<td align=\"center\">a.pop()</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">리스트 마지막 요소를 추출한다. 스택의 연산이다.</td>\n</tr>\n<tr>\n<td align=\"center\">a.pop(0)</td>\n<td align=\"center\">O(n)</td>\n<td align=\"center\">리스트 첫번째 요소를 추출한다. 큐의 연산이다.<br />이 경우 전체 복사가 필요하므로 O(n)이다.</td>\n</tr>\n<tr>\n<td align=\"center\">del a[i]</td>\n<td align=\"center\">O(n)</td>\n<td align=\"center\">i에 따라 다르다. 최악의 경우 O(n)이다.</td>\n</tr>\n<tr>\n<td align=\"center\">a.sort()</td>\n<td align=\"center\">O(n log n)</td>\n<td align=\"center\">정렬한다. 팀소트(Timsort)를 사용하며, 최선의 경우 O(n)에도 실행될 수 있다.</td>\n</tr>\n<tr>\n<td align=\"center\">min(a), max(a)</td>\n<td align=\"center\">O(n)</td>\n<td align=\"center\">최솟값/최댓값을 계산하기 위해서는 전체를 선형 탐색해야 한다.</td>\n</tr>\n<tr>\n<td align=\"center\">a.reverse()</td>\n<td align=\"center\">O(n)</td>\n<td align=\"center\">뒤집는다.</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>리스트의 경우 탐색 시 값의 존재 유무를 확인하려면 정렬된 경우에는 이진 검색이 효율적이다.</p>\n</blockquote>\n<p>존재하지 않는 인덱스를 조회할 경우 <code class=\"language-text\">IndexError</code>가 발생한다.</p>\n<h3 id=\"리스트에서-요소-삭제하기\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%8A%A4%ED%8A%B8%EC%97%90%EC%84%9C-%EC%9A%94%EC%86%8C-%EC%82%AD%EC%A0%9C%ED%95%98%EA%B8%B0\" aria-label=\"리스트에서 요소 삭제하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리스트에서 요소 삭제하기</h3>\n<ul>\n<li>\n<p>인덱스로 삭제하기</p>\n<ul>\n<li><code class=\"language-text\">del</code> 키워드를 사용하면 인덱스로 삭제가 가능하다. ex) del a[1]</li>\n</ul>\n</li>\n<li>\n<p>값으로 삭제하기</p>\n<ul>\n<li><code class=\"language-text\">remove()</code> 함수를 사용하면 값에 해당하는 요소를 삭제할 수 있다. ex) a.remove(3)</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"딕셔너리\" style=\"position:relative;\"><a href=\"#%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC\" aria-label=\"딕셔너리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>딕셔너리</h1>\n<p>내부적으로는 해시 테이블(Hash Table)로 구현되어 있다. 해시할 수만 있다면 숫자 뿐만 아니라, 문자, 집합까지 불변 객체를 모두 키로 사용할 수 있다. <strong>이 과정을 해싱이라고 하며, 해시 테이블을 이용해 자료를 저장한다.</strong> 또한 입력과 조회 모두 O(1)에 가능하다는 특징이 있다.</p>\n<p>[딕셔너리의 주요 연산 시간 복잡도]</p>\n<table>\n<thead>\n<tr>\n<th>연산</th>\n<th>시간 복잡도</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>len(a)</td>\n<td>O(1)</td>\n<td>요소의 개수를 리턴한다.</td>\n</tr>\n<tr>\n<td>a[key]</td>\n<td>O(1)</td>\n<td>키를 조회하여 값을 리턴한다.</td>\n</tr>\n<tr>\n<td>a[key] = value</td>\n<td>O(1)</td>\n<td>키/값을 삽입한다.</td>\n</tr>\n<tr>\n<td>key in a</td>\n<td>O(1)</td>\n<td>딕셔너리에 키가 존재하는지 확인한다.</td>\n</tr>\n</tbody>\n</table>\n<p>기존에 딕셔너리는 입력 순서가 유지되지 않았지만 파이썬 3.6 이하에서는 <code class=\"language-text\">collections.OrderedDict()</code> 라는 별도 자료형을 제공했었다. 그러나 3.7부터는 내부적으로 인덱스를 이용해 입력 순서를 유지한다.</p>\n<p>또한 조회 시 항상 디폴트 값을 생성해 키 오류를 방지하는 <code class=\"language-text\">collections.defaultdict()</code>,</p>\n<p>요소의 값을 키로 하고 개수를 값 형태로 만들어 카운팅 하는 <code class=\"language-text\">collections.Counter()</code> 등이 있다.</p>\n<p>딕셔너리에서는 존재하지 않는 키를 조회하면 <code class=\"language-text\">KeyError</code> 에러가 발생한다.</p>\n<p>에러처리 방법</p>\n<ul>\n<li>try, except</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">del</span> a<span class=\"token punctuation\">[</span><span class=\"token string\">'key4'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token string\">'key4'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> KeyError<span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'존재하지 않는 키'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>if 문을 통한 키값을 확인</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token string\">'key4'</span> <span class=\"token keyword\">in</span> a\n<span class=\"token operator\">>></span> Fasle\n\n<span class=\"token keyword\">if</span> <span class=\"token string\">'key4'</span> <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'존재하는 키'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'존재하지 않는 키'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>또한 키/값을 for 반복문으로도 조회가 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"defaultdict-객체\" style=\"position:relative;\"><a href=\"#defaultdict-%EA%B0%9D%EC%B2%B4\" aria-label=\"defaultdict 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>defaultdict 객체</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> collections<span class=\"token punctuation\">.</span>defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\na<span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\na<span class=\"token punctuation\">[</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a\ndefaultdict<span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'int'</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># C라는 키는 존재하지 않는다.</span>\na<span class=\"token punctuation\">[</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a\ndefaultdict<span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'int'</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>원래라면 C 키 값에 <code class=\"language-text\">+1</code>를 해주면 KeyError가 발생했겠지만 에러 없이 자동으로 디폴트인 0을 기준으로 자동 생성한 후 여기에 1을 더해줬다.</p>\n<h3 id=\"counter-객체\" style=\"position:relative;\"><a href=\"#counter-%EA%B0%9D%EC%B2%B4\" aria-label=\"counter 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Counter 객체</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> b <span class=\"token operator\">=</span> collections<span class=\"token punctuation\">.</span>Counter<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> b\nCounter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>가장 빈도 수가 높은 요소는 <code class=\"language-text\">most_common()</code>을 사용하면 된다.</p>\n<p><code class=\"language-text\">b.most_common(2) = [(5, 3), (6, 2)]</code></p>\n<br />\n<a href='#'><small class='up-button'>위로 올라가기💨</small></a>\n<br />","frontmatter":{"title":"[파이썬알고리즘인터뷰]#5 리스트, 딕셔너리 자료형","date":"February 09, 2021","category":"🔥 algorithm"}}},"pageContext":{"slug":"/algorithm/[파이썬알고리즘인터뷰]5.리스트, 딕셔너리 자료형/","previous":{"fields":{"slug":"/Kubernetes/Kubernetes 기본 명령어/"},"frontmatter":{"title":"Kubernetes 기본 명령어","category":"🧭 Kubernetes","draft":false}},"next":{"fields":{"slug":"/jenkins/Jenkins_들어가기/"},"frontmatter":{"title":"Jenkins 들어가기","category":"👨‍🍳 jenkins","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}